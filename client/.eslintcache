[{"/app/src/index.js":"1","/app/src/App.js":"2","/app/src/reportWebVitals.js":"3"},{"size":457,"mtime":1616500805000,"results":"4","hashOfConfig":"5"},{"size":7752,"mtime":1616501044000,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1610635837000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"aqd6k",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"/app/src/index.js",[],["16","17"],"/app/src/App.js",["18","19"],"import React, { useState, useEffect } from 'react';\nimport { uuid } from 'uuidv4';\n\nimport socketIOClient from 'socket.io-client';\n\nconst ENDPOINT = 'http://localhost:1234';\n// let timer;\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n    \n//     this.state = {\n//       task: {},\n//       id: '',\n//       counter: 10,\n//       percent: 100,\n//     }\n//     this.socket = socketIOClient(ENDPOINT);\n//   }\n\n//   componentDidMount() {\n//     const id = uuid();\n//     this.socket.on('connect', () => {\n//       this.socket.emit('USER_CONNECTION', { id, socketId: this.socket.id, status: 'ready' });\n//     })\n\n//     this.socket.on('TASK_ASSIGNMENT', (data) => {\n//       this.setState({\n//         task: data,\n//       });\n//       this.countDown();\n//     });\n//     window.addEventListener('beforeunload', this.handleUnload);\n//   }\n\n\n//   componentWillUnmount() {\n//     window.removeEventListener('beforeunload', this.handleUnload);\n//     clearInterval(timer);\n//     this.socket.disconnect(true);\n//   }\n\n//   handleUnload = (e) => {\n//     console.log('TTTTTTTTTTT');\n//     const { task } = this.state;\n//     if (task.id) {\n//       let result = {};\n//       result = {\n//         status: 'faile',\n//         ...task,\n//         count: task.count ? task.count + 1 : 1,\n//       };\n//       this.socket.emit('USER_CLOSE_TAB', {\n//         socketId: this.socket.id,\n//         status: 'ready'\n//       }, result);\n//     }\n//   }\n\n//   countDown =   () => {\n//     if (this.state.counter > 0) {\n//       timer = setInterval(() => {\n//         this.setState({\n//           counter: this.state.counter - 1,\n//           percent: this.state.percent - Math.ceil(this.state.percent / this.state.counter),\n//         });\n//       }, 1000);\n//     }\n//   }\n\n//   handleExpired = () => {\n//     clearInterval(timer);\n//     const { task } = this.state;\n//     if (task.id) {\n//       let result = {};\n//       result = {\n//         status: 'timeout',\n//         ...task,\n//         count: task.count ? task.count + 1 : 1,\n//       };\n//       this.setState({ counter: 10, percent: 100, task: {} });\n//       this.socket.emit('TASK_HANDLER', {\n//         socketId: this.socket.id,\n//         status: 'ready',\n//       }, result);\n//     }\n//   }\n\n\n//   // handle task assigned\n//   handleSubmit = (e) => {\n//     const { task } = this.state;\n//     if (task.id) {\n//       let result = {};\n//       result = {\n//         ...task,\n//         status: 'done',\n//       };\n//       this.setState({ counter: 10, percent: 100, task: {} }, () => {\n//         clearInterval(timer);\n//         this.socket.emit('TASK_HANDLER', {\n//           socketId: this.socket.id,\n//           status: 'ready',\n//         }, result);\n//       });\n//     }\n//   }\n\n//   render() {\n//     console.log(this.state.counter);\n//     if (this.state.counter < 0) {\n//       console.log('----352463463----');\n//       this.handleExpired();\n//     }\n//     return (\n//       <div className=\"App\" style={{ marginTop: '30px', marginLeft: '30px' }}>\n//         <div>\n//           <p>Countdown: {this.state?.counter}</p>\n//           <p>ID: {this.state?.task?.id}</p>\n//           <p> Data: {this.state.task.text}</p>\n//           <p>Retry: {this.state?.task?.count ? this.state?.task?.count : 0}</p>\n//           {/* <input name=\"input\" style={{ marginRight:'20px' }} onChange={this.handleChange} /> */}\n//           <button onClick={this.handleSubmit}>Submit</button>\n//         </div>\n//      </div>\n//     )\n//   }\n// }\n\n\n// export default App;\n\n\n/* eslint-disable no-confusing-arrow */\n/* eslint-disable max-len */\n/* eslint-disable react/no-string-refs */\n// import React from 'react';\n// import _ from 'lodash';\n// import { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch';\n// import { Button, Col, Row, Form, Progress, Tag, Carousel } from 'antd';\n// import socketIOClient from 'socket.io-client';\n// import { getAccessToken, getAccountId } from '../../utils/authority';\n// import PageHeaderLayout from '../../layouts/PageHeaderLayout';\n// import { SOCKET_ENDPOINT } from '../../common/constants';\n\nlet timer;\n\nclass RequestQueue extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      task: {},\n      id: '',\n      counter: 10,\n      percent: 100,\n      imageVisible: false,\n    };\n    this.socket = socketIOClient(ENDPOINT,);\n  }\n\n  componentDidMount() {\n    const id = uuid();\n    this.socket.on('connect', () => {\n      this.socket.emit('USER_CONNECTION', { id, socketId: this.socket.id, status: 'ready' });\n    });\n\n    this.socket.on('TASK_ASSIGNMENT', (data) => {\n      this.setState({\n        task: data,\n        imageVisible: true,\n      }, () => {\n        // start countdown when has assigned task\n        this.countDown();\n      });\n    });\n    window.addEventListener('beforeunload', this.handleUnload);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.handleUnload);\n    clearInterval(timer);\n    this.socket.disconnect(true);\n  }\n\n  handleUnload = () => {\n    const { task } = this.state;\n    if (task.id) {\n      let result = {};\n      result = {\n        status: 'faile',\n        ...task,\n        count: task.count ? task.count + 1 : 1,\n      };\n      this.socket.emit('USER_CLOSE_TAB', {\n        socketId: this.socket.id,\n        status: 'ready',\n      }, result);\n    }\n  }\n\n  countDown = () => {\n    if (this.state.counter > 0) {\n      timer = setInterval(() => {\n        this.setState({\n          counter: this.state.counter - 1,\n          percent: this.state.percent - Math.ceil(this.state.percent / this.state.counter),\n        });\n      }, 1000);\n    }\n  }\n\n  handleExpired = () => {\n    clearInterval(timer);\n    const { task } = this.state;\n    if (task.id) {\n      let result = {};\n      result = {\n        status: 'timeout',\n        ...task,\n        count: task.count ? task.count + 1 : 1,\n      };\n      this.setState({ counter: 10, percent: 100, task: {}, imageVisible: false }, () => {\n        console.log('dadksfkskfksfkk');\n        this.socket.emit('TASK_HANDLER', {\n          socketId: this.socket.id,\n          status: 'ready',\n        }, result);\n      });\n    }\n  }\n\n  handleApprove = () => {\n    const { task } = this.state;\n    if (task.id) {\n      let result = {};\n      result = {\n        ...task,\n        status: 'done',\n      };\n      this.setState({ counter: 10, percent: 100, task: {}, imageVisible: false }, () => {\n        clearInterval(timer);\n        this.socket.emit('TASK_HANDLER', {\n          socketId: this.socket.id,\n          status: 'ready',\n        }, result);\n      });\n    }\n  }\n\n  handleReject = () => {\n    const { task } = this.state;\n    if (task.id) {\n      let result = {};\n      result = {\n        ...task,\n        status: 'failed',\n      };\n      this.setState({ counter: 10, percent: 100, task: {}, imageVisible: false }, () => {\n        clearInterval(timer);\n        this.socket.emit('TASK_HANDLER', {\n          socketId: this.socket.id,\n          status: 'ready',\n        }, result);\n      });\n    }\n  }\n\n  render() {\n    if (this.state.counter === 0) {\n      this.handleExpired();\n    }\n    return (\n      <>\n        <div className=\"App\" style={{ marginTop: '30px', marginLeft: '30px' }}>\n          <div>\n            <p>Countdown: {this.state?.counter}</p>\n            <p>ID: {this.state?.task?.id}</p>\n            <p> Data: {this.state.task.text}</p>\n            <p>Retry: {this.state?.task?.count ? this.state?.task?.count : 0}</p>\n            {/* <input name=\"input\" style={{ marginRight:'20px' }} onChange={this.handleChange} /> */}\n            <button onClick={this.handleApprove}>Submit</button>\n          </div>\n      </div>\n      </>\n    );\n  }\n}\nexport default RequestQueue;\n","/app/src/reportWebVitals.js",[],{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":1,"column":17,"nodeType":"26","messageId":"27","endLine":1,"endColumn":25},{"ruleId":"24","severity":1,"message":"28","line":1,"column":27,"nodeType":"26","messageId":"27","endLine":1,"endColumn":36},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]